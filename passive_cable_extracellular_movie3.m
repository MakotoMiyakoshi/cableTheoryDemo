function passive_cable_extracellular_movie3()
% PASSIVE_CABLE_EXTRACELLULAR_MOVIE3
% Visualizes the 2-D extracellular potential φ(x,y,t) generated by a passive,
% unbranched axon/dendrite receiving a localized synaptic conductance at x0.
%
% Modeling assumptions
% • Infinite, homogeneous, isotropic volume conductor with conductivity σ_e.
% • Passive cable; sealed ends (Neumann) for V(x,t).
% • Source model (hybrid, current-conserving):
%     I_m^ℓ(x,t) = -∂I_ax/∂x  (divergence of axial current)
%                  − I_syn^ℓ(x,t)·δ_{x=x0}
%   where I_ax = -(π a^2/R_i) ∂V/∂x and I_syn^ℓ = (g_syn/dx)(E_syn − V(x0,t)).
%   This enforces a localized inward synaptic sink at x0 and distributed
%   outward return currents elsewhere. Numerically ∑ I_m^ℓ Δx ≈ 0 each step.
%
% Field computation
% • Line-source approximation:
%     φ(r,t) = (1/(4πσ_e)) Σ_j [ I_m^ℓ(x_j,t) Δx / |r − (x_j,0)| ] .
% • Grid: 100×100 over (x,y); cable lies on y=0 from −2λ…+2λ.
%
% What the movie shows
% • Left: φ(x,y,t) in mV. By default, you can toggle:
%     use_return_only = true  → visualize only outward (passive return) currents.
%     use_return_only = false → visualize total field (sink + return).
%   Output file name switches accordingly:
%     'passive_cable_extracellular_passiveReturn.mp4'  or  '..._total.mp4'.
% • Right: membrane potential V(x,t) and time traces at x = {0, λ/2, λ, 2λ}.
%
% Synaptic drive
% • AMPA-like alpha conductance g_syn(t) = g_max · α(t−t_s), peak at t_peak.
% • E_syn is absolute (e.g., 0 V) unless V is defined relative to rest; then
%   set E_syn ≈ +0.070 V to reflect a 70 mV driving force at rest.
%
% Units & parameters
% • a [m], R_i [Ω·m], R_m [Ω·m^2], C_m [F/m^2], τ = R_m C_m [s], λ = √(R_m a / (2R_i)) [m].
% • φ is computed in volts; plots convert to mV (×1e3).
%
% Optional transforms (for dynamic-range compression)
% • A signed log transform is precomputed:
%     phi_log = sign(φ) · log10(1 + |φ|)     % not plotted by default
%   (Choose a scale factor if desired: log10(1 + |φ|/scale).)
%
% Notes
% • Color limits in imagesc are set separately for “total” vs “return-only” views.
% • Parameters are set to literature-based values for large myelinated fibers; adjust
%   a, g_max, and σ_e to match your preparation or to target a desired φ amplitude.


%% --- Choose which field to visualize:
use_return_only = true;


%% ---- Biophysics (same scale as before) ---- Adopted from Ilmoniemi et al. (2016) Frontiers Cellular Neurosci
a        = 4.0e-6;        % axon radius [m]
Ri       = 0.33;          % axial resistivity [Ω·m]
Rm       = 1/2.73;        % specific membrane resistance [Ω·m^2]
Cm       = 0.028;         % specific membrane capacitance [F/m^2]
tau      = Rm*Cm;         % [s]
lambda   = sqrt((Rm*a)/(2*Ri));  % [m] 1.5 mm
sigma_e  = 0.3;           % extracellular conductivity [S/m] (typical brain tissue)

%% ---- Cable geometry & grid ----
L      = 4.0*lambda;      % cable length [m]
Nx     = 201;
x      = linspace(lambda*-2, lambda*2, Nx).';
dx = x(2)-x(1);

%% ---- Time grid ----
Tend   = 0.015;           % [s] Time to end
dt     = 5e-5;            % [s] Time step
Nt     = round(Tend/dt);
tvec   = (0:Nt-1)*dt;

%% ---- Synaptic input (localized conductance at x0) ----
x0       = 0;
[~,i0]   = min(abs(x-x0));
Esyn     = +0.07;         % [V] relative to rest?
gmax     = 5e-10;         % [S] (per node) unitary AMPA size; empirical range ~0.1–1 nS.
ts       = 0.001;         % [s] time of stimulus
tpeak    = 5e-4;          % [s]
alph = @(t) (t>0).*(t./tpeak).*exp(1 - t./tpeak); % alpha-function

%% ---- Discretization for V(x,t): implicit Euler, sealed ends ----
e  = ones(Nx,1);
L2 = spdiags([e -2*e e], -1:1, Nx, Nx);
L2(1,1)   = -2; L2(1,2)         = +2;  % Neumann at 0
L2(end,end) = -2; L2(end,end-1) = +2;  % Neumann at L

D    = (lambda^2)/tau;
Aimp = speye(Nx) - dt*( D*(L2/(dx^2)) - (1/tau)*speye(Nx) );
[Lfac,Ufac] = ilu(Aimp,struct('type','ilutp','droptol',1e-3));

%% ---- Extracellular field grid (100 x 100) ----
Nxg = 100;
Nyg = 100;
xpad   = 0.25*L;
% xmin   = -xpad;
% xmax = L + xpad;         % include a bit beyond the cable ends
xmin = (L + 2*xpad)/2*-1;
xmax = (L + 2*xpad)/2;

yspan  = 1.5*lambda;
ymin   = -yspan;
ymax = +yspan;
xg = linspace(xmin, xmax, Nxg);
yg = linspace(ymin, ymax, Nyg);
[Xg,Yg] = meshgrid(xg, yg);

% Cable lies along y=0 from x in [0,L]. Avoid singularity near the line:
r_min = max(2*a, 5e-6);  % clamp distances below this [m] when evaluating 1/r

%% ---- Probes (optional) to show V at distances)
x_marks = [x0, x0+lambda/2, x0+lambda, x0+2*lambda];
ix      = arrayfun(@(xm) find(abs(x-xm)==min(abs(x-xm)),1), x_marks);
traces  = zeros(length(ix), Nt);

%% ---- Movie setup ----
if use_return_only
    vid = VideoWriter('passive_cable_extracellular_passiveReturn.mp4','MPEG-4');
else
    vid = VideoWriter('passive_cable_extracellular_total.mp4','MPEG-4');
end

vid.Quality = 95; vid.FrameRate = 30;
open(vid);
f = figure('Color','w','Position',[80 80 1200 650]);

%% ---- Initialize membrane potential ----
V    = zeros(Nx,1);
Vold = V;

%% ---- Precompute geometry for speed: distances from each segment center to grid ----
% Treat each node as a short line segment of length Δx centered at (x_j, 0).
% Contribution to φ ~ (1/(4πσ)) * I_j_per_length * Δx / r_j.
Xj = x(:).';                      % 1 x Nx
Yj = zeros(1,Nx);                 % y=0
% Grid is Nyg x Nxg; we’ll evaluate distances vectorized per node later.

defaultColors   = get(groot, 'defaultAxesColorOrder');
firstFourColors = defaultColors(1:4, :);


%% ---- Main loop ----
for k = 1:Nt
    t = tvec(k);

    % Synaptic conductance and *per-length* transmembrane current at i0
    gsyn = gmax * alph(t - ts);          % [S] per node
    Iext = sparse(Nx,1);
    Iext(i0) = (gsyn/dx) * (Esyn - V(i0));  % [A/m] (acts as inward, depolarizing)

    % Advance V (implicit Euler)
    rhs = V + dt*(Rm/tau)*Iext;
    V = Ufac \ (Lfac \ rhs);

    % dV/dt (backward difference, for capacitive current)
    dVdt = (V - Vold)/dt;
    Vold = V;

    % % ---- Membrane current per unit length (OUTWARD positive) ----
    % % Outward leak + capacitive, MINUS inward synaptic current (converted to per-length at i0)
    % I_line = 2*pi*a*( Cm*dVdt + (1/Rm)*V );  % [A/m], all nodes
    % if gsyn ~= 0
    %     I_syn_per_len = (gsyn/dx) * (Esyn - V(i0)); % inward when Esyn>V
    %     I_line(i0) = I_line(i0) - I_syn_per_len;    % subtract inward synaptic current
    % end


    % ---- Conserved transmembrane current (OUTWARD +) via axial-current divergence ----
    % I_ax at half-nodes, sealed ends → 0 at boundaries
    dVdx     = diff(V)/dx;                         % size Nx-1 (centered)
    Iax_half = zeros(Nx+1,1);
    Iax_half(2:end-1) = -(pi*a^2/Ri) * dVdx;      % [A], sign by Ohm’s law
    I_line   = -diff(Iax_half)/dx;                % [A/m], outward +, size Nx

    % enforce sink explicitly
    I_syn_per_len = (gsyn/dx) * (Esyn - V(i0));
    I_line(i0) = I_line(i0) - I_syn_per_len;

    % (Optional sanity) Should be ~0 each frame:
    %fprintf('∑ I_line Δx = %.3e A\n', sum(I_line)*dx);

    % --- Split conserved transmembrane current into outward (return) vs inward (sink)
    I_ret  = max(I_line, 0); % outward-only (passive return currents)
    I_sink = min(I_line, 0); % inward-only (synaptic sink region + any small negatives)

    I_src = I_line;
    if use_return_only
        I_src = I_ret;       % visualize only passive return currents
    end

    % --- Extracellular potential from the chosen source set
    phi = zeros(Nyg, Nxg);  % [V]
    for j = 1:Nx
        dxg = Xg - Xj(j);
        dyg = Yg - Yj(j);
        r = hypot(dxg, dyg);
        r(r < r_min) = r_min;
        phi = phi + (I_src(j)*dx)/(4*pi*sigma_e) ./ r;
    end

    % Store voltage traces for the side panel
    traces(:,k) = V(ix);

    % ---- Plot: left = φ(x,y,t), right-top = V(x,t), right-bottom = traces ----
    clf

    % (A) 2-D φ field
    subplot(2,3,[1 2 4 5])

    phi_log = sign(phi) .* log10(1 + abs(phi));
    %imagesc(xg*1e3, yg*1e3, phi*1e3, [-5e-6 5e-6]); % For total = inward + outward
    imagesc(xg*1e3, yg*1e3, phi*1e3, [-1e-11 1e-11]); % For outward only
    colormap jet
    axis xy

    hold on
    plot([-lambda*2 lambda*2]*1e3, [0 0], 'k-', 'LineWidth', 2)   % cable axis
    plot(0,            0, 'ko', 'MarkerFaceColor', firstFourColors(1,:), 'MarkerSize',8) % synapse
    plot(lambda/2*1e3, 0, 'ko', 'MarkerFaceColor', firstFourColors(2,:), 'MarkerSize',8) % synapse
    plot(lambda*1*1e3, 0, 'ko', 'MarkerFaceColor', firstFourColors(3,:), 'MarkerSize',8) % synapse
    plot(lambda*2*1e3, 0, 'ko', 'MarkerFaceColor', firstFourColors(4,:), 'MarkerSize',8) % synapse

    text(0,            0.15, '0')
    text(lambda/2*1e3, 0.15, 'λ/2')
    text(lambda  *1e3, 0.15, 'λ')
    text(lambda*2*1e3, 0.15, '2λ')

    hold off
    colorbar
    xlabel('x (mm)')
    ylabel('y (mm)')
    title(sprintf('Extracellular potential \\phi(x,y,t) [mV],  t = %.2f ms', 1e3*t))

    % (B) Membrane profile V(x,t)
    subplot(2,3,3)
    plot(x*1e3, V*1e3, 'LineWidth', 2); grid on; hold on
    ylim([0 1.3e-6])
    yl = ylim;
    plot([x0 x0]*1e3, yl, ':', 'LineWidth', 1);
    hold off
    xlabel('x (mm)'); ylabel('V_m (mV)')
    title('                 Membrane potential along cable')

    % (C) Local time courses vs distance
    subplot(2,3,6)
    plot(tvec*1e3, traces(1,:)*1e3, 'LineWidth',1.8); hold on
    plot(tvec*1e3, traces(2,:)*1e3, 'LineWidth',1.4);
    plot(tvec*1e3, traces(3,:)*1e3, 'LineWidth',1.2);
    plot(tvec*1e3, traces(4,:)*1e3, 'LineWidth',1.0); hold off; grid on
    xlabel('t (ms)');
    ylabel('V_m (mV)')
    ylim([0 1.3e-6])
    legend({'x=0','x=λ/2','x=λ','x=2λ'}, 'Location','northeast')
    title('                 Membrane potential over time')

    set(findall(gcf,'-property', 'fontsize'), 'fontsize', 12)

    drawnow
    writeVideo(vid, getframe(f));
end

close(vid);
disp('Saved movie: passive_cable_extracellular.mp4');

end